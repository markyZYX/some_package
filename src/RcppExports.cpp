// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bytes
SEXP bytes(SEXP int_vec);
RcppExport SEXP _sort_bytes(SEXP int_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type int_vec(int_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(bytes(int_vec));
    return rcpp_result_gen;
END_RCPP
}
// fstsort
SEXP fstsort(SEXP int_vec);
RcppExport SEXP _sort_fstsort(SEXP int_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type int_vec(int_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fstsort(int_vec));
    return rcpp_result_gen;
END_RCPP
}
// fstsort_radix_int
SEXP fstsort_radix_int(SEXP int_vec);
RcppExport SEXP _sort_fstsort_radix_int(SEXP int_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type int_vec(int_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fstsort_radix_int(int_vec));
    return rcpp_result_gen;
END_RCPP
}
// fstsort_radix_logical
SEXP fstsort_radix_logical(SEXP logical_vec);
RcppExport SEXP _sort_fstsort_radix_logical(SEXP logical_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type logical_vec(logical_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fstsort_radix_logical(logical_vec));
    return rcpp_result_gen;
END_RCPP
}
// fstsort_radix_logical_order
SEXP fstsort_radix_logical_order(SEXP logical_vec, SEXP order);
RcppExport SEXP _sort_fstsort_radix_logical_order(SEXP logical_vecSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type logical_vec(logical_vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(fstsort_radix_logical_order(logical_vec, order));
    return rcpp_result_gen;
END_RCPP
}
// fstmergesort
SEXP fstmergesort(SEXP int_vec_left, SEXP int_vec_right);
RcppExport SEXP _sort_fstmergesort(SEXP int_vec_leftSEXP, SEXP int_vec_rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type int_vec_left(int_vec_leftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type int_vec_right(int_vec_rightSEXP);
    rcpp_result_gen = Rcpp::wrap(fstmergesort(int_vec_left, int_vec_right));
    return rcpp_result_gen;
END_RCPP
}
// fstsort_combined
SEXP fstsort_combined(SEXP int_vec);
RcppExport SEXP _sort_fstsort_combined(SEXP int_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type int_vec(int_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fstsort_combined(int_vec));
    return rcpp_result_gen;
END_RCPP
}
// getnrofthreads
SEXP getnrofthreads();
RcppExport SEXP _sort_getnrofthreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getnrofthreads());
    return rcpp_result_gen;
END_RCPP
}
// setnrofthreads
int setnrofthreads(SEXP nrOfThreads);
RcppExport SEXP _sort_setnrofthreads(SEXP nrOfThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type nrOfThreads(nrOfThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(setnrofthreads(nrOfThreads));
    return rcpp_result_gen;
END_RCPP
}
// hasopenmp
SEXP hasopenmp();
RcppExport SEXP _sort_hasopenmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hasopenmp());
    return rcpp_result_gen;
END_RCPP
}
// restore_after_fork
void restore_after_fork(bool restore);
RcppExport SEXP _sort_restore_after_fork(SEXP restoreSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type restore(restoreSEXP);
    restore_after_fork(restore);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sort_bytes", (DL_FUNC) &_sort_bytes, 1},
    {"_sort_fstsort", (DL_FUNC) &_sort_fstsort, 1},
    {"_sort_fstsort_radix_int", (DL_FUNC) &_sort_fstsort_radix_int, 1},
    {"_sort_fstsort_radix_logical", (DL_FUNC) &_sort_fstsort_radix_logical, 1},
    {"_sort_fstsort_radix_logical_order", (DL_FUNC) &_sort_fstsort_radix_logical_order, 2},
    {"_sort_fstmergesort", (DL_FUNC) &_sort_fstmergesort, 2},
    {"_sort_fstsort_combined", (DL_FUNC) &_sort_fstsort_combined, 1},
    {"_sort_getnrofthreads", (DL_FUNC) &_sort_getnrofthreads, 0},
    {"_sort_setnrofthreads", (DL_FUNC) &_sort_setnrofthreads, 1},
    {"_sort_hasopenmp", (DL_FUNC) &_sort_hasopenmp, 0},
    {"_sort_restore_after_fork", (DL_FUNC) &_sort_restore_after_fork, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sort(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
